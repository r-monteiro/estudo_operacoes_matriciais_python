# -*- coding: utf-8 -*-
"""trabalho_algebralinear_27/11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10pMutHmg-f4YMi0uqrYdMcAH2Jo0QGS_

**ADIÇÃO**
"""

def soma_matrizes(matriz1, matriz2):
    if len(matriz1) != len(matriz2) or len(matriz1[0]) != len(matriz2[0]):
        print("As matrizes têm tamanhos diferentes. A adição não é possível.")
        return None

    return [[matriz1[i][j] + matriz2[i][j] for j in range(len(matriz1[0]))] for i in range(len(matriz1))]

def obter_matriz():
    num_linhas, num_colunas = map(int, input("Digite o número de linhas e colunas da matriz (separados por espaço): ").split())
    return [[float(input(f"Digite o valor para a posição [{i+1}, {j+1}]: ")) for j in range(num_colunas)] for i in range(num_linhas)]

print("Matriz 1:")
matriz1 = obter_matriz()

print("\nMatriz 2:")
matriz2 = obter_matriz()

resultado = soma_matrizes(matriz1, matriz2)

if resultado is not None:
    print("\nMatriz resultante da adição:")
    for linha in resultado:
        print(linha)

"""**SUBTRAÇÃO**"""

def subtrai_matrizes(matriz1, matriz2):
    if len(matriz1) != len(matriz2) or len(matriz1[0]) != len(matriz2[0]):
        print("As matrizes têm tamanhos diferentes. A subtração não é possível.")
        return None

    return [[matriz1[i][j] - matriz2[i][j] for j in range(len(matriz1[0]))] for i in range(len(matriz1))]

def obter_matriz():
    num_linhas, num_colunas = map(int, input("Digite o número de linhas e colunas da matriz (separados por espaço): ").split())
    return [[float(input(f"Digite o valor para a posição [{i+1}, {j+1}]: ")) for j in range(num_colunas)] for i in range(num_linhas)]

print("Matriz 1:")
matriz1 = obter_matriz()

print("\nMatriz 2:")
matriz2 = obter_matriz()

resultado = subtrai_matrizes(matriz1, matriz2)

if resultado is not None:
    print("\nMatriz resultante da subtração:")
    for linha in resultado:
        print(linha)

"""**MULTIPLICAÇÃO**"""

def multiplicar_matrizes(matriz1, matriz2):
    if len(matriz1[0]) != len(matriz2):
        raise ValueError("Número de colunas da primeira matriz deve ser igual ao número de linhas da segunda matriz.")

    return [[sum(matriz1[i][k] * matriz2[k][j] for k in range(len(matriz2))) for j in range(len(matriz2[0]))] for i in range(len(matriz1))]

def obter_matriz():
    num_linhas, num_colunas = map(int, input("Digite o número de linhas e colunas da matriz (separados por espaço): ").split())
    return [[float(input(f"Digite o valor para a posição [{i+1}, {j+1}]: ")) for j in range(num_colunas)] for i in range(num_linhas)]

try:
    matriz_A = obter_matriz()
    matriz_B = obter_matriz()

    resultado_multiplicacao = multiplicar_matrizes(matriz_A, matriz_B)
    print("\nResultado da multiplicação de matrizes:")
    for linha in resultado_multiplicacao:
        print(linha)
except ValueError as e:
    print(f"\nErro: {e}")

"""**MULTIPLICAÇÃO POR UM NÚMERO REAL**"""

def multiplicar_matriz_por_escalar(matriz, escalar):
    linhas = len(matriz)
    colunas = len(matriz[0])

    resultado = [[0] * colunas for _ in range(linhas)]

    for i in range(linhas):
        for j in range(colunas):
            resultado[i][j] = matriz[i][j] * escalar

    return resultado

def obter_matriz():
    num_linhas, num_colunas = map(int, input("Digite o número de linhas e colunas da matriz (separados por espaço): ").split())
    return [[float(input(f"Digite o valor para a posição [{i+1}, {j+1}]: ")) for j in range(num_colunas)] for i in range(num_linhas)]

matriz_original = obter_matriz()

escalar = float(input("Digite o número real pelo qual deseja multiplicar a matriz: "))

resultado_multiplicacao = multiplicar_matriz_por_escalar(matriz_original, escalar)

print("\nMatriz original:")
for linha in matriz_original:
    print(linha)

print("\nMatriz multiplicada por", escalar, ":")
for linha in resultado_multiplicacao:
    print(linha)